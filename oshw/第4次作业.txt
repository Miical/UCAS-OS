1、copy_process函数的参数最后五项是：long eip,long cs,long eflags,long esp,long ss。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。

2、分析get_free_page()函数的代码，叙述在主内存中获取一个空闲页的技术路线。



3、分析copy_page_tables（）函数的代码，叙述父进程如何为子进程复制页表。

两层循环，外面的循环遍历页目录表表项；通过get_free_page()获得一个空页用于放新页表；
里面的循环遍历页表表项，将页表表项直接拷贝过来，然后两边都设置为只读，并且增加对应物理页的引用计数

4、进程0创建进程1时，为进程1建立了task_struct及内核栈，第一个页表，分别位于物理内存两个页。请问，这两个页的位置，究竟占用的是谁的线性地址空间，内核、进程0、进程1、还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。

内核用到的16M： | 内核页目录表 | 页表 | 页表 | 页表 | 页表 | ...... | 进程1的页表 | 进程1的task |
在内核的线性地址空间

5、假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。

6、#define switch_to(n) {\
struct {long a,b;} __tmp; \
__asm__("cmpl %%ecx,_current\n\t" \
    "je 1f\n\t" \
    "movw %%dx,%1\n\t" \
    "xchgl %%ecx,_current\n\t" \
    "ljmp %0\n\t" \
    "cmpl %%ecx,_last_task_used_math\n\t" \
    "jne 1f\n\t" \
    "clts\n" \
    "1:" \
    ::"m" (*&__tmp.a),"m" (*&__tmp.b), \
    "d" (_TSS(n)),"c" ((long) task[n])); \
}
代码中的"ljmp %0\n\t" 很奇怪，按理说jmp指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了"m" (*&__tmp.a)，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。


 跳转到一个任务的 TSS 段选择符组成的地址处会造成 CPU 进行任务切换操作。
 // 输入：%0 - 偏移地址(*&__tmp.a)； %1 - 存放新 TSS 的选择符；
 // dx - 新任务 n 的 TSS 段选择符；ecx - 新任务指针 task[n]。
 // 其中临时数据结构__tmp 用于组建 177 行远跳转（far jump）指令的操作数。该操作数由 4 字节偏移
 // 地址和 2 字节的段选择符组成。因此__tmp 中 a 的值是 32 位偏移值，而 b 的低 2 字节是新 TSS 段的
 // 选择符（高 2 字节不用）。跳转到 TSS 段选择符会造成任务切换到该 TSS 对应的进程。对于造成任务
 // 切换的长跳转，a 值无用。177 行上的内存间接跳转指令使用 6 字节操作数作为跳转目的地的长指针，
 // 其格式为：jmp 16 位段选择符：32 位偏移值。但在内存中操作数的表示顺序与这里正好相反。
 // 在判断新任务上次执行是否使用过协处理器时，是通过将新任务状态段地址与保存在
 // last_task_used_math 变量中的使用过协处理器的任务状态段地址进行比较而作出的，
 // 参见 kernel/sched.c 中函数 math_state_restore()。

7、进程0开始创建进程1，调用fork（），跟踪代码时我们发现，fork代码执行了两次，第一次，执行fork代码后，跳过init（）直接执行了for(;;) pause()，第二次执行fork代码后，执行了init（）。奇怪的是，我们在代码中并没有看到向转向fork的goto语句，也没有看到循环语句，是什么原因导致fork反复执行？请说明理由（可以图示），并给出代码证据。

8、详细分析进程调度的全过程。考虑所有可能（signal、alarm除外）

9、分析panic函数的源代码，根据你学过的操作系统知识，完整、准确的判断panic函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进panic函数？

volatile void panic(const char * s)
{
	printk("Kernel panic: %s\n\r",s);
	if (current == task[0])
		printk("In swapper task - not syncing\n\r");
	else
		sys_sync();
	for(;;);
}
如果当前正在运行的进程是进程0（swapper进程），则输出"In swapper task - not syncing"，并说明不需要进行同步操作。swapper进程是内核在没有其他进程时使用的特殊进程，它处于最基本的状态，不需要进行文件系统同步等操作。
如果当前进程不是swapper进程，则调用sys_sync()进行文件系统同步。sys_sync()的作用是将所有的文件系统数据刷新到磁盘，确保在发生崩溃前文件数据不丢失。此步骤确保系统在崩溃前已经将所有内存中的数据写入磁盘。


10、getblk函数中，申请空闲缓冲块的标准就是b_count为0，而申请到之后，为什么在wait_on_buffer(bh)后又执行if（bh->b_count）来判断b_count是否为0？

11、b_dirt已经被置为1的缓冲块，同步前能够被进程继续读、写？给出代码证据。

12、wait_on_buffer函数中为什么不用if（）而是用while（）？

13、分析ll_rw_block(READ,bh)读硬盘块数据到缓冲区的整个流程（包括借助中断形成的类递归），叙述这些代码实现的功能。
